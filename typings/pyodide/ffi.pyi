__all__ = (
    'ConversionError', 'JsArray', 'JsAsyncGenerator', 'JsAsyncIterable',
    'JsAsyncIterator', 'JsBuffer', 'JsDoubleProxy', 'JsException',
    'JsFetchResponse', 'JsGenerator', 'JsIterable', 'JsIterator', 'JsMap',
    'JsMutableMap', 'JsPromise', 'JsProxy', 'JsDomElement', 'JsCallable',
    'JsTypedArray', 'create_once_callable', 'create_proxy', 'destroy_proxies',
    'to_js', 'IN_BROWSER', 'register_js_module', 'unregister_js_module',
)

from collections.abc import AsyncIterator, Awaitable, Callable, ItemsView, Iterable, Iterator, KeysView, Mapping, MutableMapping, MutableSequence, Sequence, ValuesView
from types import TracebackType
from typing import Any, ClassVar, Final, Generic, IO, Protocol, TypeAlias, TypeVar, overload

# from _pyodide._core_docs

T = TypeVar('T')
S = TypeVar('S')
KT = TypeVar('KT')  # Key type.
VT = TypeVar('VT')  # Value type.
Tco = TypeVar('Tco', covariant=True)  # Any type covariant containers.
Vco = TypeVar('Vco', covariant=True)  # Any type covariant containers.
VTco = TypeVar('VTco', covariant=True)  # Value type covariant containers.
Tcontra = TypeVar('Tcontra', contravariant=True)  # Ditto contravariant.

IN_BROWSER: Final[bool] = ...

class Destroyable(Protocol):
    def destoy(self) -> None: ...


_Converter: TypeAlias = Callable[['JsProxy', Callable[['JsProxy'], Any], Callable[['JsProxy', Any], None]], Any]

class JsProxy:
    _js_type_flags: ClassVar[Any]

    @property
    def js_id(self) -> int: ...
    @property
    def typeof(self) -> str: ...
    def object_entries(self) -> 'JsArray[JsArray[Any]]': ...
    def object_keys(self) -> 'JsArray[str]': ...
    def object_values(self) -> 'JsArray[Any]': ...
    def as_object_map(self, *, hereditary: bool = ...) -> 'JsMutableMap[str, Any]': ...
    def new(self, *__args: Any, **__kwargs: Any) -> JsProxy: ...
    def to_py(self, *, depth: int = ..., default_converter: _Converter | None = ...) -> Any: ...

class JsDoubleProxy(Destroyable, JsProxy):
    def unwrap(self) -> Any: ...

class JsPromise(JsProxy, Generic[T]):
    @overload
    def then(self, onfulfilled: None, onrejected: Callable[[BaseException], Awaitable[S]], /) -> 'JsPromise[S]': ...
    @overload
    def then(self, onfulfilled: None, onrejected: Callable[[BaseException], S], /) -> 'JsPromise[S]': ...
    @overload
    def then(self, onfulfilled: Callable[[T], Awaitable[S]], onrejected: Callable[[BaseException], Awaitable[S]] | None = None, /) -> 'JsPromise[S]': ...
    @overload
    def then(self, onfulfilled: Callable[[T], S], onrejected: Callable[[BaseException], S] | None = None, /) -> 'JsPromise[S]': ...
    @overload
    def catch(self, onrejected: Callable[[BaseException], Awaitable[S]], /) -> 'JsPromise[S]': ...
    @overload
    def catch(self, onrejected: Callable[[BaseException], S], /) -> 'JsPromise[S]': ...
    def finally_(self, onfinally: Callable[[], None], /) -> 'JsPromise[T]': ...

class JsBuffer(JsProxy):
    def assign(self, rhs: Any, /) -> None: ...
    def assign_to(self, to: Any, /) -> None: ...
    def to_memoryview(self) -> memoryview: ...
    def to_bytes(self) -> bytes: ...
    def to_file(self, file: IO[bytes] | IO[str], /) -> None: ...
    def from_file(self, file: IO[bytes] | IO[str], /) -> None: ...
    def _into_file(self, file: IO[bytes] | IO[str], /) -> None: ...
    def to_string(self, encoding: str | None = None) -> str: ...

class JsIterator(JsProxy, Generic[Tco]):
    def __next__(self) -> Tco: ...
    def __iter__(self) -> Iterator[Tco]: ...

class JsAsyncIterator(JsProxy, Generic[Tco]):
    def __anext__(self) -> Awaitable[Tco]: ...
    def __aiter__(self) -> AsyncIterator[Tco]: ...

class JsIterable(JsProxy, Generic[Tco]):
    def __iter__(self) -> Iterator[Tco]: ...

class JsAsyncIterable(JsProxy, Generic[Tco]):
    def __aiter__(self) -> AsyncIterator[Tco]: ...

class JsGenerator(JsIterable[Tco], Generic[Tco, Tcontra, Vco]):
    def send(self, value: Tcontra) -> Tco: ...
    @overload
    def throw(self, typ: type[BaseException], val: BaseException | object = ..., tb: TracebackType | None = ..., /) -> Tco: ...
    @overload
    def throw(self, typ: BaseException, val: None = ..., tb: TracebackType | None = ..., /) -> Tco: ...
    def close(self) -> None: ...
    def __next__(self) -> Tco: ...
    def __iter__(self) -> 'JsGenerator[Tco, Tcontra, Vco]': ...

class JsFetchResponse(JsProxy):
    bodyUsed: bool
    ok: bool
    redirected: bool
    status: int
    statusText: str
    type: str
    url: str
    headers: Any
    def clone(self) -> 'JsFetchResponse': ...
    async def arrayBuffer(self) -> JsBuffer: ...
    async def text(self) -> str: ...
    async def json(self) -> JsProxy: ...

class JsAsyncGenerator(JsAsyncIterable[Tco], Generic[Tco, Tcontra, Vco]):
    _js_type_flags = ['IS_ASYNC_GENERATOR']
    def __anext__(self) -> Awaitable[Tco]: ...
    def __aiter__(self) -> 'JsAsyncGenerator[Tco, Tcontra, Vco]': ...
    def asend(self, value: Tcontra, /) -> Awaitable[Tco]: ...
    @overload
    def athrow(self, typ: type[BaseException], val: BaseException | object = ..., tb: TracebackType | None = ..., /) -> Awaitable[Tco]: ...
    @overload
    def athrow(self, typ: BaseException, val: None = ..., tb: TracebackType | None = ..., /) -> Awaitable[Tco]: ...
    def aclose(self) -> Awaitable[None]: ...

class JsCallable(JsProxy):
    def __call__(self) -> Any: ...

class JsArray(JsIterable[T], Generic[T], MutableSequence[T]):
    @overload
    def __getitem__(self, idx: int) -> T: ...
    @overload
    def __getitem__(self, idx: slice) -> 'JsArray[T]': ...
    @overload
    def __setitem__(self, idx: int, value: T) -> None: ...
    @overload
    def __setitem__(self, idx: slice, value: Iterable[T]) -> None: ...
    def __delitem__(self, idx: int | slice) -> None: ...
    def __len__(self) -> int: ...
    def extend(self, values: Iterable[T]) -> None: ...
    def __reversed__(self) -> Iterator[T]: ...
    def pop(self, index: int = -1) -> T: ...
    def push(self, value: T) -> None: ...
    def append(self, value: T) -> None: ...
    def index(self, value: T, start: int = ..., stop: int = ...) -> int: ...
    def count(self, value: T) -> int: ...
    def reverse(self) -> None: ...
    def insert(self, index: int, value: T) -> None: ...
    def remove(self, value: T) -> None: ...
    def to_py(self, *, depth: int = ..., default_converter: _Converter | None = None) -> list[Any]: ...
    def __mul__(self, other: int) -> 'JsArray[T]': ...

class JsTypedArray(JsBuffer, JsArray[int]):
    BYTES_PER_ELEMENT: ClassVar[int]
    buffer: JsBuffer
    def subarray(self, start: int | None = ..., stop: int | None = ...) -> 'JsTypedArray': ...

class JsMap(JsIterable[KT], Generic[KT, VTco], Mapping[KT, VTco]):
    def __getitem__(self, idx: KT) -> VTco: ...
    def __len__(self) -> int: ...
    def __contains__(self, idx: object) -> bool: ...
    def keys(self) -> KeysView[KT]: ...
    def items(self) -> ItemsView[KT, VTco]: ...
    def values(self) -> ValuesView[VTco]: ...
    @overload
    def get(self, key: KT) -> VTco | None: ...
    @overload
    def get(self, key: KT, default: VTco | T) -> VTco | T: ...

class _SupportsKeysAndGetItem(Protocol[KT, VTco]):
    def keys(self) -> Iterable[KT]: ...
    def __getitem__(self, __key: KT) -> VTco: ...

class JsMutableMap(JsMap[KT, VT], Generic[KT, VT], MutableMapping[KT, VT]):
    @overload
    def pop(self, key: KT, /) -> VT: ...
    @overload
    def pop(self, key: KT, default: VT | T = ..., /) -> VT | T: ...
    def setdefault(self, key: KT, default: VT | None = None) -> VT: ...
    def popitem(self) -> tuple[KT, VT]: ...
    def clear(self) -> None: ...
    @overload
    def update(self, __m: _SupportsKeysAndGetItem[KT, VT], **kwargs: VT) -> None: ...
    @overload
    def update(self, __m: Iterable[tuple[KT, VT]], **kwargs: VT) -> None: ...
    @overload
    def update(self, **kwargs: VT) -> None: ...
    def __setitem__(self, idx: KT, value: VT) -> None: ...
    def __delitem__(self, idx: KT) -> None: ...

class JsOnceCallable(JsCallable, Destroyable): ...

class JsException(JsProxy, Exception):
    name: str
    message: str
    stack: str

class ConversionError(Exception): ...
class InternalError(Exception): ...

class JsDomElement(JsProxy):
    id: str
    @property
    def tagName(self) -> str: ...
    @property
    def children(self) -> Sequence['JsDomElement']: ...
    @property
    def style(self) -> Any: ...
    def appendChild(self, child: 'JsDomElement') -> None: ...
    def addEventListener(self, event: str, listener: Callable[[Any], None]) -> None: ...
    def removeEventListener(self, event: str, listener: Callable[[Any], None]) -> None: ...

def create_once_callable(obj: Callable[..., Any], /) -> JsOnceCallable: ...
def create_proxy(obj: Any, /, *, capture_this: bool = ..., roundtrip: bool = ...) -> JsDoubleProxy: ...

@overload
def to_js(
    obj: list[Any] | tuple[Any],
    /,
    *,
    depth: int = ...,
    pyproxies: JsProxy | None = ...,
    create_pyproxies: bool = ...,
    dict_converter: Callable[[Iterable[JsArray[Any]]], JsProxy] | None = ...,
    default_converter: _Converter | None = ...,
) -> JsArray[Any]: ...
@overload
def to_js(
    obj: dict[Any, Any],
    /,
    *,
    depth: int = ...,
    pyproxies: JsProxy | None,
    create_pyproxies: bool,
    dict_converter: ...,
    default_converter: _Converter | None = ...,
) -> JsMap[Any, Any]: ...
@overload
def to_js(
    obj: Any,
    /,
    *,
    depth: int = ...,
    pyproxies: JsProxy | None = ...,
    create_pyproxies: bool = ...,
    dict_converter: Callable[[Iterable[JsArray[Any]]], JsProxy] | None = ...,
    default_converter: _Converter | None = ...,
) -> Any: ...

def destroy_proxies(pyproxies: JsArray[Any], /) -> None: ...


# from _pyodide._importhook

def register_js_module(name: str, jsproxy: Any) -> None: ...
def unregister_js_module(name: str) -> None: ...
