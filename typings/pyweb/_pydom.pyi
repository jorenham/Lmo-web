from collections.abc import Iterable, Iterator, Sequence
from typing import Final, Self, SupportsIndex, overload, override

from pyodide.ffi import JsProxy

type _Primitive = str | float | int | bool | None

def alert(message: _Primitive = ...) -> None: ...

class BaseElement:
    _js: object
    _parent: BaseElement | None
    _proxies: dict[str, OptionsProxy | StyleProxy]
    style: Final[StyleProxy]

    @property
    def parent(self) -> BaseElement | None: ...

    def __init__(self, js_element: object) -> None: ...
    @override
    def __eq__(self, obj: object) -> bool: ...
    def create(
        self,
        type_: str,
        *,
        is_child: bool = ...,
        classes: Iterable[str] = ...,
        html: str | None = ...,
        label: str | None = ...,
    ) -> Self: ...
    def find(self, selector: str) -> ElementCollection: ...

class Element(BaseElement):
    @property
    def children(self) -> Sequence[Self]: ...
    @property
    def options(self) -> OptionsProxy: ...
    @property
    def classes(self) -> Sequence[str]: ...
    @property
    def html(self) -> str: ...
    @html.setter
    def html(self, value: str) -> None: ...
    @property
    def content(self) -> str: ...
    @content.setter
    def content(self, value: str) -> None: ...
    @property
    def id(self) -> str: ...
    @id.setter
    def id(self, value: str) -> None: ...
    @property
    def value(self) -> str | None: ...
    @value.setter
    def value(self, value: _Primitive) -> None: ...  # pyright: ignore[reportPropertyTypeMismatch]
    @property
    def selected(self) -> bool: ...
    @selected.setter
    def selected(self, value: bool) -> None: ...

    def append(self, child: JsProxy | ElementCollection | Element) -> None: ...
    def clone(self, new_id: _Primitive = ...) -> Self: ...
    def remove_class(self, classname: str) -> Self: ...
    def add_class(self, classname: str) -> Self: ...
    def show_me(self) -> None: ...

class OptionsProxy:
    _element: Final[Element]

    @property
    def options(self) -> Sequence[Element]: ...
    @property
    def selected(self) -> Element: ...

    def __init__(self, element: Element) -> None: ...
    @overload
    def __getitem__(self, key: SupportsIndex) -> Element: ...
    @overload
    def __getitem__(self, key: slice) -> Sequence[Element]: ...
    def __iter__(self) -> Iterator[Element]: ...
    def __len__(self) -> int: ...
    def add(
        self,
        value: object = ...,
        html: str | None = ...,
        text: str | None = ...,
        before: Element | int | None = ...,
        **__kws: object,
    ) -> None: ...
    def remove(self, item: int) -> None: ...
    def clear(self) -> None: ...

class StyleProxy(dict[str, str]):
    _element: Final[Element]

    @property
    def _style(self) -> str: ...
    @property
    def visible(self) -> bool: ...
    @visible.setter
    def visible(self, value: bool) -> None: ...

    def __init__(self, element: Element) -> None: ...
    def remove(self, key: str) -> None: ...
    def set(self, **kws: str) -> None: ...

class StyleCollection:
    def __init__(self, collection: ElementCollection) -> None: ...
    def __get__(
        self,
        obj: ElementCollection,
        objtype: type[ElementCollection] | None = ...,
    ) -> dict[str, str]: ...
    @overload
    def __getitem__(self, key: SupportsIndex) -> str: ...
    @overload
    def __getitem__(self, key: slice) -> Sequence[str]: ...
    def __setitem__(self, key: SupportsIndex, value: str) -> None: ...
    def remove(self, key: SupportsIndex) -> None: ...

class ElementCollection:
    _elements: Sequence[Element]
    style: Final[StyleCollection]

    @property
    def html(self) -> str: ...
    @html.setter
    def html(self, value: str) -> None: ...
    @property
    def value(self) -> str | None: ...
    @value.setter
    def value(self, value: _Primitive) -> None: ...  # pyright: ignore[reportPropertyTypeMismatch]
    @property
    def children(self) -> Sequence[Element]: ...

    def __init__(self, elements: Sequence[Element]) -> None: ...
    @overload
    def __getitem__(self, key: SupportsIndex) -> Element: ...
    @overload
    def __getitem__(self, key: slice | str) -> ElementCollection: ...
    def __len__(self) -> int: ...
    @override
    def __eq__(self, obj: object) -> bool: ...
    def __iter__(self) -> Self: ...
    def __next__(self) -> Element: ...
    @overload
    def _get_attribute(
        self,
        attr: str,
        index: slice | None = ...,
    ) -> Sequence[object]: ...
    @overload
    def _get_attribute(self, attr: str, index: SupportsIndex) -> object: ...
    def _set_attribute(self, attr: str, value: object) -> None: ...

class DomScope:
    def __getattr__(self, __name: str) -> object | None: ...

class PyDom(BaseElement):
    BaseElement: Final[type[BaseElement]]
    Element: Final[type[Element]]
    ElementCollection: Final[type[ElementCollection]]

    ids: Final[DomScope]
    body: Final[Element]
    head: Final[Element]

    def __init__(self) -> None: ...
    @overload
    def __getitem__(self, key: int | slice) -> list[Element]: ...
    @overload
    def __getitem__(self, key: str) -> ElementCollection: ...
    @override
    def create(  # pyright: ignore[reportIncompatibleMethodOverride]
        self,
        type_: str,
        *,
        classes: Iterable[str] | None = ...,
        html: str | None = ...,
    ) -> Element: ...
